import { MongoClient } from 'mongodb';

const MONGODB_URI = 'mongodb+srv://gabrielaraujo:sGoeqQgbxlsIwnjc@clustercentral.quqgq6x.mongodb.net/?retryWrites=true&w=majority&appName=ClusterCentral';
const DB_NAME = 'console_conteudo';
const COLLECTION_NAME = 'Bot_perguntas';

let client = null;
let db = null;

async function conectarMongoDB() {
  if (!client) {
    try {
      client = new MongoClient(MONGODB_URI);
      await client.connect();
      db = client.db(DB_NAME);
      console.log('‚úÖ Conectado ao MongoDB');
    } catch (error) {
      console.error('‚ùå Erro ao conectar MongoDB:', error.message);
      throw error;
    }
  }
  return db;
}

// Mapeamento de categorias para sugest√µes
const SUGESTOES_MAP = {
  'credito': {
    titulo: 'Voc√™ deseja saber mais sobre qual assunto de cr√©dito?',
    opcoes: [
      { texto: 'Antecipa√ß√£o da Restitui√ß√£o', categoria: 'antecipacao' },
      { texto: 'Cr√©dito do Trabalhador', categoria: 'credito_trabalhador' },
      { texto: 'Cr√©dito Pessoal', categoria: 'credito_pessoal' },
      { texto: 'Data dos Cr√©ditos (Lotes)', categoria: 'lotes' }
    ]
  },
  'antecipacao': {
    titulo: 'Sobre Antecipa√ß√£o da Restitui√ß√£o:',
    opcoes: [
      { texto: 'Abertura e Gest√£o de Conta', pergunta: 'Abertura de Conta Celcoin' },
      { texto: 'Como contratar', pergunta: 'Antecipa√ß√£o contrata√ß√£o' },
      { texto: 'Valores e Taxas', pergunta: 'Antecipa√ß√£o - Valores' },
      { texto: 'Problemas e Erros', pergunta: 'Antecipa√ß√£o - Erro na Finaliza√ß√£o' },
      { texto: 'Quita√ß√£o e Pagamento', pergunta: 'Antecipa√ß√£o - Como quitar' }
    ]
  },
  'credito_trabalhador': {
    titulo: 'Sobre Cr√©dito do Trabalhador:',
    opcoes: [
      { texto: 'Como funciona', pergunta: 'Cr√©dito do trabalhador - Como funciona' },
      { texto: 'Contrata√ß√£o', pergunta: 'Cr√©dito do trabalhador - Contrata√ß√£o' },
      { texto: 'Libera√ß√£o do valor', pergunta: 'Cr√©dito do trabalhador - Libera√ß√£o do valor' },
      { texto: 'Como √© descontado', pergunta: 'Cr√©dito do trabalhador - Como √© descontado?' },
      { texto: 'Quita√ß√£o', pergunta: 'Cr√©dito do Trabalhador - Como quitar' }
    ]
  },
  'credito_pessoal': {
    titulo: 'Sobre Cr√©dito Pessoal:',
    opcoes: [
      { texto: 'Como contratar', pergunta: 'Cr√©dito pessoal - Como contratar' },
      { texto: 'Crit√©rios', pergunta: 'Cr√©dito Pessoal - Crit√©rios' },
      { texto: 'Valores e taxas', pergunta: 'Cr√©dito Pessoal - Quais s√£o as taxas de juros?' },
      { texto: 'Prazos e pagamento', pergunta: 'Cr√©dito Pessoal - Qual o prazo para pagar?' },
      { texto: 'Problemas e erros', pergunta: 'Empr√©stimo Pessoal - Erros' }
    ]
  },
  'lotes': {
    titulo: 'Data dos Cr√©ditos (Lotes):',
    opcoes: [
      { texto: 'Restitui√ß√£o - Data dos lotes', pergunta: 'Restitui√ß√£o - Data dos lotes' },
      { texto: 'Restitui√ß√£o - Consulta', pergunta: 'Restitui√ß√£o - Consulta' },
      { texto: 'Restitui√ß√£o - Em fila', pergunta: 'Restitui√ß√£o - Em fila' },
      { texto: 'Restitui√ß√£o - No lote', pergunta: 'Restitui√ß√£o - No lote' },
      { texto: 'Restitui√ß√£o - N√£o creditada', pergunta: 'Restitui√ß√£o - N√£o creditada' },
      { texto: 'Terceiro lote', pergunta: 'Terceiro lote !!!' }
    ]
  },
  'pix': {
    titulo: 'PIX e Pagamentos:',
    opcoes: [
      { texto: 'PIX - Cadastro', pergunta: 'PIX - Cadastro' },
      { texto: 'PIX - Como usar', pergunta: 'PIX - Como usar' },
      { texto: 'PIX - Problemas', pergunta: 'PIX - Problemas' },
      { texto: 'PIX - Valores', pergunta: 'PIX - Valores' }
    ]
  },
  'conta': {
    titulo: 'Abertura e Gest√£o de Conta:',
    opcoes: [
      { texto: 'Abertura de Conta', pergunta: 'Abertura de Conta Celcoin' },
      { texto: 'Cadastro', pergunta: 'Cadastro' },
      { texto: 'Documentos necess√°rios', pergunta: 'Documentos necess√°rios' },
      { texto: 'Problemas no cadastro', pergunta: 'Problemas no cadastro' }
    ]
  },
  'app': {
    titulo: 'App e Tecnologia:',
    opcoes: [
      { texto: 'Download do App', pergunta: 'Download do App' },
      { texto: 'Problemas no App', pergunta: 'Problemas no App' },
      { texto: 'Atualiza√ß√µes', pergunta: 'Atualiza√ß√µes' },
      { texto: 'Funcionalidades', pergunta: 'Funcionalidades' }
    ]
  },
  'declaracao': {
    titulo: 'Declara√ß√£o de Imposto de Renda:',
    opcoes: [
      { texto: 'Como declarar', pergunta: 'Como declarar' },
      { texto: 'Documentos necess√°rios', pergunta: 'Documentos necess√°rios' },
      { texto: 'Prazo de entrega', pergunta: 'Prazo de entrega' },
      { texto: 'Problemas na declara√ß√£o', pergunta: 'Problemas na declara√ß√£o' }
    ]
  },
  'veloprime': {
    titulo: 'VeloPrime e Investimentos:',
    opcoes: [
      { texto: 'O que √© VeloPrime', pergunta: 'O que √© VeloPrime' },
      { texto: 'Como investir', pergunta: 'Como investir' },
      { texto: 'Rentabilidade', pergunta: 'Rentabilidade' },
      { texto: 'Resgate', pergunta: 'Resgate' }
    ]
  }
};

export default async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  try {
    const { categoria } = req.query;
    
    if (!categoria) {
      return res.status(400).json({
        status: 'erro',
        error: 'Categoria n√£o fornecida'
      });
    }

    console.log(`üîç Buscando sugest√µes para categoria: ${categoria}`);
    
    // Buscar sugest√µes no mapeamento
    const sugestoes = SUGESTOES_MAP[categoria];
    
    if (!sugestoes) {
      return res.status(404).json({
        status: 'erro',
        error: 'Categoria n√£o encontrada'
      });
    }

    // Se a categoria tem perguntas espec√≠ficas, buscar respostas no MongoDB
    const opcoesComRespostas = await Promise.all(
      sugestoes.opcoes.map(async (opcao) => {
        if (opcao.pergunta) {
          try {
            const database = await conectarMongoDB();
            const collection = database.collection(COLLECTION_NAME);
            
            // Buscar resposta no MongoDB
            const resultado = await collection.findOne({
              $or: [
                { pergunta: { $regex: opcao.pergunta, $options: 'i' } },
                { palavras_chave: { $regex: opcao.pergunta, $options: 'i' } }
              ]
            });
            
            if (resultado) {
              return {
                ...opcao,
                resposta: resultado.palavras_chave || resultado.resposta
              };
            }
          } catch (error) {
            console.error('‚ùå Erro ao buscar resposta:', error);
          }
        }
        
        return opcao;
      })
    );

    return res.status(200).json({
      status: 'sucesso',
      titulo: sugestoes.titulo,
      opcoes: opcoesComRespostas
    });

  } catch (error) {
    console.error('‚ùå Erro na API de sugest√µes:', error);
    return res.status(500).json({
      status: 'erro',
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
}