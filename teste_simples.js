// teste_simples.js - Teste da busca simplificada (80/20)

import axios from 'axios';

const BASE_URL = 'http://localhost:3000/api/ask';
const EMAIL_TESTE = 'teste@velotax.com.br';

// Casos de teste baseados nos t√≥picos reais da planilha
const casosTeste = [
  {
    nome: "Busca Exata - Antecipa√ß√£o",
    pergunta: "antecipa√ß√£o da restitui√ß√£o",
    esperado: "exact"
  },
  {
    nome: "Busca Exata - Celcoin",
    pergunta: "abertura de conta celcoin",
    esperado: "exact"
  },
  {
    nome: "Busca Exata - Cr√©dito",
    pergunta: "cr√©dito do trabalhador",
    esperado: "exact"
  },
  {
    nome: "Busca Exata - PIX",
    pergunta: "pix cadastro na celcoin",
    esperado: "exact"
  },
  {
    nome: "Busca Exata - Declara√ß√£o",
    pergunta: "declara√ß√£o de imposto de renda",
    esperado: "exact"
  },
  {
    nome: "Busca Exata - VeloPrime",
    pergunta: "veloprime a√ß√µes no exterior",
    esperado: "exact"
  },
  {
    nome: "Busca Parcial - Antecipa√ß√£o",
    pergunta: "como funciona a antecipa√ß√£o",
    esperado: "partial"
  },
  {
    nome: "Busca Parcial - Cr√©dito",
    pergunta: "quanto tempo para receber cr√©dito",
    esperado: "partial"
  },
  {
    nome: "Busca Parcial - PIX",
    pergunta: "problema com pix",
    esperado: "partial"
  },
  {
    nome: "Busca Parcial - Declara√ß√£o",
    pergunta: "erro na declara√ß√£o",
    esperado: "partial"
  }
];

async function executarTeste(caso) {
  try {
    console.log(`\nüß™ Testando: ${caso.nome}`);
    console.log(`‚ùì Pergunta: "${caso.pergunta}"`);
    
    const inicio = Date.now();
    const response = await axios.get(BASE_URL, {
      params: {
        pergunta: caso.pergunta,
        email: EMAIL_TESTE
      }
    });
    const tempo = Date.now() - inicio;
    
    const dados = response.data;
    
    console.log(`‚è±Ô∏è  Tempo: ${tempo}ms`);
    console.log(`üìä Status: ${dados.status}`);
    console.log(`üéØ Source: ${dados.source}`);
    
    if (dados.score) {
      console.log(`üìà Score: ${dados.score}`);
    }
    
    if (dados.cached) {
      console.log(`üíæ Cache Hit`);
    }
    
    // Valida√ß√£o simples
    let validacao = "‚ùå FALHOU";
    
    if (dados.status === "sucesso" && dados.source === "Planilha") {
      validacao = "‚úÖ PASSOU";
    } else if (dados.status === "clarification_needed" && dados.options) {
      validacao = "‚úÖ PASSOU (M√∫ltiplas op√ß√µes)";
    } else if (dados.status === "sucesso_ia" && dados.source === "IA") {
      validacao = "‚úÖ PASSOU (IA)";
    }
    
    console.log(`üéØ Resultado: ${validacao}`);
    
    return {
      caso: caso.nome,
      tempo,
      validacao: validacao.includes("‚úÖ"),
      status: dados.status,
      source: dados.source
    };
    
  } catch (error) {
    console.log(`‚ùå ERRO: ${error.message}`);
    return {
      caso: caso.nome,
      tempo: 0,
      validacao: false,
      erro: error.message
    };
  }
}

async function executarTodosTestes() {
  console.log("üöÄ Testando busca simplificada (80/20)...\n");
  
  const resultados = [];
  
  for (const caso of casosTeste) {
    const resultado = await executarTeste(caso);
    resultados.push(resultado);
    
    // Pausa entre testes
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  // Relat√≥rio final
  console.log("\n" + "=".repeat(60));
  console.log("üìä RELAT√ìRIO FINAL - BUSCA SIMPLIFICADA");
  console.log("=".repeat(60));
  
  const passou = resultados.filter(r => r.validacao).length;
  const total = resultados.length;
  const tempoMedio = resultados.reduce((acc, r) => acc + r.tempo, 0) / total;
  
  console.log(`‚úÖ Testes que passaram: ${passou}/${total} (${Math.round(passou/total*100)}%)`);
  console.log(`‚è±Ô∏è  Tempo m√©dio: ${Math.round(tempoMedio)}ms`);
  
  // Estat√≠sticas por fonte
  const planilha = resultados.filter(r => r.source === "Planilha").length;
  const ia = resultados.filter(r => r.source === "IA").length;
  const cache = resultados.filter(r => r.cached).length;
  
  console.log(`\nüìä Estat√≠sticas:`);
  console.log(`üìã Planilha: ${planilha}/${total}`);
  console.log(`ü§ñ IA: ${ia}/${total}`);
  console.log(`üíæ Cache: ${cache}/${total}`);
  
  console.log("\nüìã Detalhes por teste:");
  resultados.forEach(r => {
    const status = r.validacao ? "‚úÖ" : "‚ùå";
    const fonte = r.source || "ERRO";
    console.log(`${status} ${r.caso}: ${r.tempo}ms (${fonte})`);
  });
  
  console.log("\nüéâ Teste conclu√≠do!");
  console.log("\nüí° Dica: Se muitos testes falharam, verifique se:");
  console.log("   - O servidor est√° rodando (npm run dev)");
  console.log("   - A planilha tem os t√≥picos corretos");
  console.log("   - As colunas est√£o na ordem: Pergunta, Palavras-chave, Resposta");
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  executarTodosTestes().catch(console.error);
}

export { executarTeste, executarTodosTestes };
